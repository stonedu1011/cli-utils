version: '3.7'

services:
#Infraservices
  consul:
    image: "${consul_image}"
    restart: always
    command: ["agent", "-server", "-ui", "-client=0.0.0.0", "-bind=127.0.0.1", "-retry-join=127.0.0.1", "-bootstrap-expect=1"]
    environment:
      CONSUL_LOCAL_CONFIG: >
        {
          "acl": {
            "enabled": true,
            "default_policy": "deny",
            "down_policy": "extend-cache",
            "tokens": {
              "master": "replace_with_token_value",
              "default": "replace_with_token_value"
            }
          }
        }
    ports:
      - "8300:8300/tcp"
      - "8400:8400/tcp"
      - "8301-8302:8301-8302/tcp"
      - "8301-8302:8301-8302/udp"
      - "8500:8500/tcp"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    volumes:
      - "${CONTAINER_DATA_PATH}/consul:/consul/data:cached"
      
  vault:
    image: "${vault_image}"
    restart: always
    command: ["server"]
    environment:
      SKIP_SETCAP: "true"
      VAULT_ADDR: "http://localhost:8200"
      VAULT_UI: "true"
      VAULT_LOCAL_CONFIG: >
        {
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": true,
              "tls_disable_client_certs": true
            }
          },
          "storage": {
            "file": {
              "path": "/vault/file/"
            }
          },
          "default_lease_ttl": "87600h",
          "max_lease_ttl": "876000h",
          "disable_clustering": true,
          "disable_mlock": true
        }
    ports:
      - "8200:8200"
    volumes:
      - "${CONTAINER_DATA_PATH}/vault/file:/vault/file:cached"
      - "${CONTAINER_DATA_PATH}/vault/root-home:/root:cached"
      
  redis:
    image: "${redis_image}"
    restart: always
    ports:
      - "6379:6379"
    
  cassandra:
    image: "${cassandra_image}"
    restart: always
    build:
      context: "./${RESOURCE_DIR}/cassandra"
      dockerfile: Dockerfile
      args:
        - "CASSANDRA_VERSION=${build_args_cassandra_version}"
        - "LUCENE_VERSION=${build_args_lucene_version}"
    ports:
      - "7000-7001:7000-7001"
      - "7199:7199"
      - "9042:9042"
      - "9160:9160"
    environment:
      CASSANDRA_START_RPC: "true"
    volumes:
      - "${CONTAINER_DATA_PATH}/cassandra:/var/lib/cassandra:cached"

  zookeeper:
    image: "${zookeeper_image}"
    restart: always
#    build:
#      context: "./${RESOURCE_DIR}/zookeeper-wurstmeister"
#      dockerfile: Dockerfile
#      args:
#        - "zookeeper_version=${build_args_zookeeper_version}"
    ports:
      - "2181:2181"

  kafka:
    image: "${kafka_image}"
    restart: always
    build:
      context: "./${RESOURCE_DIR}/kafka-wurstmeister"
      dockerfile: Dockerfile
      args:
        - "kafka_version=${build_args_kafka_version}"
        - "scala_version=${build_args_scala_version}"
        - "glibc_version=${build_args_glibc_version}"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_MESSAGE_MAX_BYTES: 2000000
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:cached"
    depends_on:
      - zookeeper
      
  es:
    image: "${es_image}"
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: "single-node"
      cluster.name: "elasticsearch"
      ES_JAVA_OPTS: "-Xms256m -Xmx256m"
      
  cockroachdb:
    image: "${cockroachdb_image}"
    restart: always
    command: ["start-single-node", "--insecure", "--host=cockrachdb", "--listen-addr=:26257", "--http-addr=:26258"]
    ports:
      - "26257:26257"
      - "26258:26258"
    volumes:
      - "${CONTAINER_DATA_PATH}/cockroachdb:/cockroach/cockroach-data:cached"
      
  jaeger:
    image: "${jaeger_image}"
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411

      
  # Post Start
  post_start_vault:
    image: "post-start:${PROJECT_NAME}-vault"
    build:
      context: "./${RESOURCE_DIR}/post-start"
      dockerfile: Dockerfile-Vault
      args:
        - "VAULT_IMAGE=${vault_image}"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "replace_with_token_value"
    volumes:
      - "${CONTAINER_DATA_PATH}/vault/file:/vault/file:cached"
    depends_on:
      - vault
    links:
      - vault
      
  post_start_cassandra:
    image: "post-start:${PROJECT_NAME}-cassandra"
    restart: on-failure
    build:
      context: "./${RESOURCE_DIR}/post-start"
      dockerfile: Dockerfile-Cassandra
      args:
        - "CASSANDRA_VERSION=${build_args_cassandra_version}"
    depends_on:
      - cassandra
    links:
      - cassandra

  post_start_consul:
    image: "post-start:${PROJECT_NAME}-consul"
    build:
      context: "./${RESOURCE_DIR}/post-start"
      dockerfile: Dockerfile-Consul
      args:
        - "CONSUL_IMAGE=${consul_image}"
    volumes:
      - "${CONTAINER_DATA_PATH}/consul:/consul/data:cached"
    depends_on:
      - consul
    links:
      - consul
      
      
